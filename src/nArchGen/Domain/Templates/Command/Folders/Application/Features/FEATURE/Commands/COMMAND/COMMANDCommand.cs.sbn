{{ if is_secured_operation_used }}using Application.Features.{{ feature_name | string.plural }}.Constants;
{{ end }}using Application.Features.{{ feature_name }}.Rules;
using AutoMapper;{{ if is_secured_operation_used }}
using Core.Application.ResponseTypes.Concrete;
using System.Net;
using Core.Application.Pipelines.Authorization;{{ end }}{{ if is_caching_used }}
using Core.Application.Pipelines.Caching;{{ end }}{{ if is_logging_used }}
using Core.Application.Pipelines.Logging;{{ end }}{{ if is_transaction_used }}
using Core.Application.Pipelines.Transaction;{{ end }}
using MediatR;{{ if is_secured_operation_used }}
using static Application.Features.{{ feature_name | string.plural }}.Constants.{{ feature_name | string.plural }}OperationClaims;{{ end }}

namespace Application.Features.{{ feature_name }}.Commands.{{ command_name | string.pascalcase }};

public class {{ command_name | string.pascalcase }}Command : IRequest<CustomResponseDto<{{ command_name | string.pascalcase }}Response>>{{ if is_secured_operation_used }}, ISecuredRequest{{ end }}{{ if is_caching_used }}, ICacheRemoverRequest{{ end }}{{ if is_logging_used }}, ILoggableRequest{{ end }}{{ if is_transaction_used }}, ITransactionalRequest{{ end }}
{%{{}%}{{ if is_secured_operation_used }}

    public string[] Roles => new[] { Admin, Write, {{ feature_name | string.pascalcase }}OperationClaims.{{ command_name }} };{{ end }}{{ if is_caching_used }}

    public bool BypassCache { get; }
    public string? CacheKey { get; }
    public string CacheGroupKey => "Get{{ feature_name | string.pascalcase }}";{{ end }}
    
    public class {{ command_name | string.pascalcase }}CommandHandler : IRequestHandler<{{ command_name | string.pascalcase }}Command, CustomResponseDto<{{ command_name | string.pascalcase }}Response>>
    {
        private readonly IMapper _mapper;
        private readonly {{ feature_name | string.pascalcase | string.singular }}BusinessRules _{{ feature_name | string.camelcase | string.singular }}BusinessRules;

        public {{ command_name | string.pascalcase }}CommandHandler(IMapper mapper, {{ feature_name | string.pascalcase | string.singular }}BusinessRules {{ feature_name | string.camelcase | string.singular }}BusinessRules)
        {
            _mapper = mapper;
            _{{ feature_name | string.camelcase | string.singular }}BusinessRules = {{ feature_name | string.camelcase | string.singular }}BusinessRules;
        }

        public async Task<CustomResponseDto<{{ command_name | string.pascalcase }}Response>> Handle({{ command_name | string.pascalcase }}Command request, CancellationToken cancellationToken)
        {
            {{ command_name | string.pascalcase }}Response response = _mapper.Map<{{ command_name | string.pascalcase }}Response>(null);
      
            return CustomResponseDto<{{ command_name | string.pascalcase }}Response>.Success((int)HttpStatusCode.OK, response, true);
        }
    }
}
