using Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Commands.Create;
using Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Commands.Delete;
using Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Commands.Update;
using Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Queries.GetById;
using Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Queries.GetToList;
using Application.Features.{{ entity.name | string.pascalcase | string.plural }}.Queries.GetList;
using Core.Application.Requests;
using Core.Application.Responses;
using Microsoft.AspNetCore.Mvc;
using Core.Application.ResponseTypes.Concrete;
using webAPI.Controllers.Base;

namespace WebAPI.Controllers;

[Route("api/[controller]")]
[ApiController]
public class {{ entity.name | string.pascalcase | string.plural }}Controller : BaseController
{
    [HttpPost]
    public async Task<IActionResult> Add([FromBody] Create{{ entity.name | string.pascalcase }}Command create{{ entity.name | string.pascalcase }}Command)
    {
        CustomResponseDto<Created{{ entity.name | string.pascalcase }}Response> response = await Mediator.Send(create{{ entity.name | string.pascalcase }}Command);

        return Created(uri: "", response);
    }

    [HttpPut]
    public async Task<IActionResult> Update([FromBody] Update{{ entity.name | string.pascalcase }}Command update{{ entity.name | string.pascalcase }}Command)
    {
        CustomResponseDto<Updated{{ entity.name | string.pascalcase }}Response> response = await Mediator.Send(update{{ entity.name | string.pascalcase }}Command);

        return Ok(response);
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> Delete([FromRoute] {{ entity.id_type }} id)
    {
        CustomResponseDto<Deleted{{ entity.name | string.pascalcase }}Response> response = await Mediator.Send(new Delete{{ entity.name | string.pascalcase }}Command { Id = id });

        return Ok(response);
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetById([FromRoute] {{ entity.id_type }} id)
    {
        CustomResponseDto<GetById{{ entity.name | string.pascalcase }}Response> response = await Mediator.Send(new GetById{{ entity.name | string.pascalcase }}Query { Id = id });
        return Ok(response);
    }
    
    [HttpGet("GetToList")]
    public async Task<IActionResult> GetToList()
    {
        CustomResponseDto<List<GetToList{{ entity.name | string.pascalcase }}Response>> response = await Mediator.Send(new GetToList{{ entity.name | string.pascalcase }}Query { });
        return Ok(response);
    }

    [HttpGet]
    public async Task<IActionResult> GetList([FromQuery] PageRequest pageRequest)
    {
        GetList{{ entity.name | string.pascalcase }}Query getList{{ entity.name | string.pascalcase }}Query = new() { PageRequest = pageRequest };
       CustomResponseDto<GetListResponse<GetList{{ entity.name | string.pascalcase }}ListItemDto>> response = await Mediator.Send(getList{{ entity.name | string.pascalcase }}Query);
        return Ok(response);
    }
}